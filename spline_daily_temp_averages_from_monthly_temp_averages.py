# -*- coding: utf-8 -*-
"""spline_daily-temp-averages_from_monthly-temp-averages.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1peULV2dEsYqLDTOOIeRMK28Bq-cNPrwA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from scipy.interpolate import CubicSpline

# https://github.com/jambao24/MATLAB_climatedata_modeling/blob/main/TempSimul3%20original%20code.rtf

# assumption: annual_temps is a numpy array with 365 elements
def calculate_mean_monthly_temps(annual_temps):
  monthly_temps = np.zeros(12)
  monthly_temps[0] = np.mean(annual_temps[0:31])
  monthly_temps[1] = np.mean(annual_temps[31:59])
  monthly_temps[2] = np.mean(annual_temps[59:90])
  monthly_temps[3] = np.mean(annual_temps[90:119])
  monthly_temps[4] = np.mean(annual_temps[119:150])
  monthly_temps[5] = np.mean(annual_temps[150:179])
  monthly_temps[6] = np.mean(annual_temps[179:210])
  monthly_temps[7] = np.mean(annual_temps[210:241])
  monthly_temps[8] = np.mean(annual_temps[241:272])
  monthly_temps[9] = np.mean(annual_temps[272:303])
  monthly_temps[10] = np.mean(annual_temps[303:334])
  monthly_temps[11] = np.mean(annual_temps[334:365])
  monthly_temps = np.round(monthly_temps, 2)
  return monthly_temps

high_temps = np.zeros(365)
low_temps = np.zeros(365)
avg_temps = np.zeros(365)

# https://pythonnumericalmethods.berkeley.edu/notebooks/chapter17.03-Cubic-Spline-Interpolation.html

# monthly averages here from Nightmare 22-25 C fictional climate)

highs_mth = np.array([44.8,43.7,37.3,25.2,14.7,10.6,11.4,22.1,31.6,42.5,46.2,45.5])
lows_mth = np.array([32.6,32.5,23.7,11.6,2.1,-2.2,-2.2,7.3,15.6,25.5,31,32.5])
#print(highs_mth)
#print(lows_mth)

# https://stackoverflow.com/questions/48199077/elementwise-aggregation-average-of-values-in-a-list-of-numpy-arrays-with-same
avgs_mth = np.mean([highs_mth, lows_mth], axis=0)
#print(avgs_mth)


# initialize the values of high_temps, low_temps, and avg_temps to the monthly averages
# daily average for each day is the monthly average for that month
high_temps[0:31] = highs_mth[0]
low_temps[0:31] = lows_mth[0]
avg_temps[0:31] = avgs_mth[0]

high_temps[31:59] = highs_mth[1]
low_temps[31:59] = lows_mth[1]
avg_temps[31:59] = avgs_mth[1]

high_temps[59:90] = highs_mth[2]
low_temps[59:90] = lows_mth[2]
avg_temps[59:90] = avgs_mth[2]

high_temps[90:119] = highs_mth[3]
low_temps[90:119] = lows_mth[3]
avg_temps[90:119] = avgs_mth[3]

high_temps[119:150] = highs_mth[4]
low_temps[119:150] = lows_mth[4]
avg_temps[119:150] = avgs_mth[4]

high_temps[150:179] = highs_mth[5]
low_temps[150:179] = lows_mth[5]
avg_temps[150:179] = avgs_mth[5]

high_temps[179:210] = highs_mth[6]
low_temps[179:210] = lows_mth[6]
avg_temps[179:210] = avgs_mth[6]

high_temps[210:241] = highs_mth[7]
low_temps[210:241] = lows_mth[7]
avg_temps[210:241] = avgs_mth[7]

high_temps[241:272] = highs_mth[8]
low_temps[241:272] = lows_mth[8]
avg_temps[241:272] = avgs_mth[8]

high_temps[272:303] = highs_mth[9]
low_temps[272:303] = lows_mth[9]
avg_temps[272:303] = avgs_mth[9]

high_temps[303:334] = highs_mth[10]
low_temps[303:334] = lows_mth[10]
avg_temps[303:334] = avgs_mth[10]

high_temps[334:365] = highs_mth[11]
low_temps[334:365] = lows_mth[11]
avg_temps[334:365] = avgs_mth[11]

#print(high_temps)
#print(low_temps)
#print(avg_temps)

# attempted spline for high and low averages.
# Use Cubic Spline function to fit the daily means to the monthly means;
# (This requires picking a day within each month for which we think the daily mean will equal the monthly mean)
# Run the interpolation over 2 calendar years (730 days) so we get a smooth transition from end of old year to beginning of new year
# Compute a new set of annual daily means using the last 40 days of old year, first 40 days of new year, and averaging the rest of Old Year and New Year in between.
# (We discard the first 40 days of Old Year and the last 40 days of New Year)

highs_interpol_x = [10,46,75,104,133,165,197,224,257,286,315,352,10+365,46+365,75+365,104+365,133+365,165+365,197+365,224+365,257+365,286+365,315+365,352+365]
highs_interpol_y = np.zeros(np.size(highs_interpol_x))
highs_interpol_y[0:12] = highs_mth
highs_interpol_y[12:24] = highs_mth
time = np.linspace(0, 730, 730)
highs_interpol = CubicSpline(highs_interpol_x, highs_interpol_y)
high_temps_new = highs_interpol(time)
#high_temps_new = np.round(high_temps_new, 2)

#high_temps_years_diff = np.zeros(365)
#high_temps_years_diff = high_temps_new[0:365]-high_temps_new[365:730]
#print('Diff between year 1 and year 2: ', np.mean(high_temps_years_diff))

high_temps_new_ = np.zeros(365)
high_temps_new_[0:40] = high_temps_new[365:40+365]
high_temps_new_[-40:] = high_temps_new[365-40:365]
high_temps_new_[40:365-40] = (np.array(high_temps_new[40:365-40]) + np.array(high_temps_new[365+40:730-40]))/2.0
#print(high_temps_new_)


highs_mth_compute365 = calculate_mean_monthly_temps(high_temps_new_)
print(highs_mth_compute365 - highs_mth)
print(np.mean(high_temps_new_) - np.mean(high_temps))



lows_interpol_x = [23,47,75,104,133,165,197,225,258,287,315,352,23+365,47+365,75+365,104+365,133+365,165+365,197+365,225+365,258+365,287+365,315+365,352+365]
lows_interpol_y = np.zeros(np.size(lows_interpol_x))
lows_interpol_y[0:12] = lows_mth
lows_interpol_y[12:24] = lows_mth
#time = np.linspace(0, 365, 365)
lows_interpol = CubicSpline(lows_interpol_x, lows_interpol_y)
low_temps_new = lows_interpol(time)
#ow_temps_new = np.round(low_temps_new, 2)
#print(low_temps_new)

low_temps_new_ = np.zeros(365)
low_temps_new_[0:40] = low_temps_new[365:40+365]
low_temps_new_[-40:] = low_temps_new[365-40:365]
low_temps_new_[40:365-40] = (np.array(low_temps_new[40:365-40]) + np.array(low_temps_new[365+40:730-40]))/2.0
#print(low_temps_new_)


lows_mth_compute365 = calculate_mean_monthly_temps(low_temps_new_)
print(lows_mth_compute365 - lows_mth)
print(np.mean(low_temps_new_) - np.mean(low_temps))

# compute new daily means from high and low temps
avg_temps_new_ = (np.array(low_temps_new_) + np.array(high_temps_new_))/2.0
avg_temps_new_ = np.round(avg_temps_new_, 2)
high_temps_new_ = np.round(high_temps_new_, 2)
low_temps_new_ = np.round(low_temps_new_, 2)

plt.figure(figsize = (10,8))
#plt.plot(time[0:365], high_temps, 'b')
#plt.plot(time[365:730], high_temps, 'b')
#plt.plot(time, high_temps_new, 'r')
plt.plot(time[0:365], high_temps_new_, 'g')
plt.plot(time[0:365], high_temps, 'b')
plt.plot(time[0:365], low_temps_new_, 'g')
plt.plot(time[0:365], low_temps, 'b')
plt.plot(time[0:365], avg_temps_new_, 'r')
#plt.plot(time[0:365], avg_temps, 'b')

from google.colab import files

#https://stackoverflow.com/questions/49394737/exporting-data-from-google-colab-to-local-machine
#https://stackoverflow.com/questions/6081008/dump-a-numpy-array-into-a-csv-file

#files.download('high_temps_new_.csv')
#files.download('low_temps_new_.csv')
#files.download('avg_temps_new_.csv')
np.savetxt('high_temps_new_.csv', high_temps_new_, delimiter=',')
np.savetxt('low_temps_new_.csv', low_temps_new_, delimiter=',')
np.savetxt('avg_temps_new_.csv', avg_temps_new_, delimiter=',')

high_temps = np.zeros(365)
low_temps = np.zeros(365)
avg_temps = np.zeros(365)

# https://pythonnumericalmethods.berkeley.edu/notebooks/chapter17.03-Cubic-Spline-Interpolation.html

# monthly averages here from Dream 22-25 C fictional climate)

highs_mth = np.array([28.2,28.1,28.7,29.8,27.9,26.4,25,26.1,27.4,29.6,29.8,28.7])
lows_mth = np.array([20.6,20.5,19.7,19.4,16.7,13.2,11.2,11.9,15.2,18.4,20.8,20.9])
#print(highs_mth)
#print(lows_mth)

# https://stackoverflow.com/questions/48199077/elementwise-aggregation-average-of-values-in-a-list-of-numpy-arrays-with-same
avgs_mth = np.mean([highs_mth, lows_mth], axis=0)
#print(avgs_mth)


# initialize the values of high_temps, low_temps, and avg_temps to the monthly averages
# daily average for each day is the monthly average for that month
high_temps[0:31] = highs_mth[0]
low_temps[0:31] = lows_mth[0]
avg_temps[0:31] = avgs_mth[0]

high_temps[31:59] = highs_mth[1]
low_temps[31:59] = lows_mth[1]
avg_temps[31:59] = avgs_mth[1]

high_temps[59:90] = highs_mth[2]
low_temps[59:90] = lows_mth[2]
avg_temps[59:90] = avgs_mth[2]

high_temps[90:119] = highs_mth[3]
low_temps[90:119] = lows_mth[3]
avg_temps[90:119] = avgs_mth[3]

high_temps[119:150] = highs_mth[4]
low_temps[119:150] = lows_mth[4]
avg_temps[119:150] = avgs_mth[4]

high_temps[150:179] = highs_mth[5]
low_temps[150:179] = lows_mth[5]
avg_temps[150:179] = avgs_mth[5]

high_temps[179:210] = highs_mth[6]
low_temps[179:210] = lows_mth[6]
avg_temps[179:210] = avgs_mth[6]

high_temps[210:241] = highs_mth[7]
low_temps[210:241] = lows_mth[7]
avg_temps[210:241] = avgs_mth[7]

high_temps[241:272] = highs_mth[8]
low_temps[241:272] = lows_mth[8]
avg_temps[241:272] = avgs_mth[8]

high_temps[272:303] = highs_mth[9]
low_temps[272:303] = lows_mth[9]
avg_temps[272:303] = avgs_mth[9]

high_temps[303:334] = highs_mth[10]
low_temps[303:334] = lows_mth[10]
avg_temps[303:334] = avgs_mth[10]

high_temps[334:365] = highs_mth[11]
low_temps[334:365] = lows_mth[11]
avg_temps[334:365] = avgs_mth[11]


# attempted spline for high and low averages.
# Use Cubic Spline function to fit the daily means to the monthly means;
# (This requires picking a day within each month for which we think the daily mean will equal the monthly mean)
# Run the interpolation over 2 calendar years (730 days) so we get a smooth transition from end of old year to beginning of new year
# Compute a new set of annual daily means using the last 40 days of old year, first 40 days of new year, and averaging the rest of Old Year and New Year in between.
# (We discard the first 40 days of Old Year and the last 40 days of New Year)

highs_interpol_x = [10,46,75,104,136,163,190,224,257,286,315,352,10+365,46+365,75+365,104+365,136+365,163+365,190+365,224+365,257+365,286+365,315+365,352+365]
highs_interpol_y = np.zeros(np.size(highs_interpol_x))
highs_interpol_y[0:12] = highs_mth
highs_interpol_y[3] += 0.3
highs_interpol_y[6] -= 0.1
highs_interpol_y[12:24] = highs_mth
highs_interpol_y[15] += 0.3
highs_interpol_y[18] -= 0.1
time = np.linspace(0, 730, 730)
highs_interpol = CubicSpline(highs_interpol_x, highs_interpol_y)
high_temps_new = highs_interpol(time)
#high_temps_new = np.round(high_temps_new, 2)

#high_temps_years_diff = np.zeros(365)
#high_temps_years_diff = high_temps_new[0:365]-high_temps_new[365:730]
#print('Diff between year 1 and year 2: ', np.mean(high_temps_years_diff))

high_temps_new_ = np.zeros(365)
high_temps_new_[0:40] = high_temps_new[365:40+365]
high_temps_new_[-40:] = high_temps_new[365-40:365]
high_temps_new_[40:365-40] = (np.array(high_temps_new[40:365-40]) + np.array(high_temps_new[365+40:730-40]))/2.0
#print(high_temps_new_)


highs_mth_compute365 = calculate_mean_monthly_temps(high_temps_new_)
print(highs_mth_compute365 - highs_mth)
print(np.mean(high_temps_new_) - np.mean(high_temps))



lows_interpol_x = [23,47,75,104,133,163,190,225,258,287,315,352,23+365,47+365,75+365,104+365,133+365,163+365,190+365,225+365,258+365,287+365,315+365,352+365]
lows_interpol_y = np.zeros(np.size(lows_interpol_x))
lows_interpol_y[0:12] = lows_mth
lows_interpol_y[12:24] = lows_mth
#time = np.linspace(0, 365, 365)
lows_interpol = CubicSpline(lows_interpol_x, lows_interpol_y)
low_temps_new = lows_interpol(time)
#ow_temps_new = np.round(low_temps_new, 2)
#print(low_temps_new)

low_temps_new_ = np.zeros(365)
low_temps_new_[0:40] = low_temps_new[365:40+365]
low_temps_new_[-40:] = low_temps_new[365-40:365]
low_temps_new_[40:365-40] = (np.array(low_temps_new[40:365-40]) + np.array(low_temps_new[365+40:730-40]))/2.0
#print(low_temps_new_)


lows_mth_compute365 = calculate_mean_monthly_temps(low_temps_new_)
print(lows_mth_compute365 - lows_mth)
print(np.mean(low_temps_new_) - np.mean(low_temps))

# compute new daily means from high and low temps
avg_temps_new_ = (np.array(low_temps_new_) + np.array(high_temps_new_))/2.0
avg_temps_new_ = np.round(avg_temps_new_, 2)
high_temps_new_ = np.round(high_temps_new_, 2)
low_temps_new_ = np.round(low_temps_new_, 2)

plt.figure(figsize = (10,8))
#plt.plot(time[0:365], high_temps, 'b')
#plt.plot(time[365:730], high_temps, 'b')
#plt.plot(time, high_temps_new, 'r')
plt.plot(time[0:365], high_temps_new_, 'g')
plt.plot(time[0:365], high_temps, 'b')
plt.plot(time[0:365], low_temps_new_, 'g')
plt.plot(time[0:365], low_temps, 'b')
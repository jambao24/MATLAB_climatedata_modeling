# -*- coding: utf-8 -*-
"""daily-temp-and-precip-averages_from_monthly-averages-data_release.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpdOLf4sVwc8mWy4C9fgoMrRp4ToxPst
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from scipy.interpolate import CubicSpline

# https://github.com/jambao24/MATLAB_climatedata_modeling/blob/main/TempSimul3%20original%20code.rtf

# assign the monthly average temp for each day of a month to a numpy array with 365 elements
# assumption: temps is an numpy array with 12 elements
def assign_monthly_avg_to_days(temps):
  temps_out = np.zeros(365)
  # initialize the values of temps_out to the monthly averages in temps
  # daily average for each day is the monthly average for that month
  temps_out[0:31] = temps[0]
  temps_out[31:59] = temps[1]
  temps_out[59:90] = temps[2]
  temps_out[90:120] = temps[3]
  temps_out[120:151] = temps[4]
  temps_out[151:181] = temps[5]
  temps_out[181:212] = temps[6]
  temps_out[212:243] = temps[7]
  temps_out[243:273] = temps[8]
  temps_out[273:304] = temps[9]
  temps_out[304:334] = temps[10]
  temps_out[334:365] = temps[11]
  return temps_out

# assumption: annual_temps is a numpy array with 365 elements
def calculate_mean_monthly_temps(annual_temps):
  monthly_temps = np.zeros(12)
  monthly_temps[0] = np.mean(annual_temps[0:31])
  monthly_temps[1] = np.mean(annual_temps[31:59])
  monthly_temps[2] = np.mean(annual_temps[59:90])
  monthly_temps[3] = np.mean(annual_temps[90:120])
  monthly_temps[4] = np.mean(annual_temps[120:151])
  monthly_temps[5] = np.mean(annual_temps[151:181])
  monthly_temps[6] = np.mean(annual_temps[181:212])
  monthly_temps[7] = np.mean(annual_temps[212:243])
  monthly_temps[8] = np.mean(annual_temps[243:273])
  monthly_temps[9] = np.mean(annual_temps[273:304])
  monthly_temps[10] = np.mean(annual_temps[304:334])
  monthly_temps[11] = np.mean(annual_temps[334:365])
  monthly_temps = np.round(monthly_temps, 2)
  return monthly_temps

# assumption: annual_precip is a numpy array with 365 elements
def calculate_monthly_precip_from_daily(annual_precip):
    monthly_precip = np.zeros(12)
    monthly_precip[0] = np.sum(annual_precip[0:31])
    monthly_precip[1] = np.sum(annual_precip[31:59])
    monthly_precip[2] = np.sum(annual_precip[59:90])
    monthly_precip[3] = np.sum(annual_precip[90:120])
    monthly_precip[4] = np.sum(annual_precip[120:151])
    monthly_precip[5] = np.sum(annual_precip[151:181])
    monthly_precip[6] = np.sum(annual_precip[181:212])
    monthly_precip[7] = np.sum(annual_precip[212:243])
    monthly_precip[8] = np.sum(annual_precip[243:273])
    monthly_precip[9] = np.sum(annual_precip[273:304])
    monthly_precip[10] = np.sum(annual_precip[304:334])
    monthly_precip[11] = np.sum(annual_precip[334:365])
    return monthly_precip

# assumption: monthly_precip is a numpy array with 12 elements
# this can also be used for computing probability of precip on any one day from num days of precip in a month
def assign_initial_daily_precip(monthly_precip):
  precip_daily = np.zeros(365)
  precip_daily[0:31] = monthly_precip[0]/31
  precip_daily[31:59] = monthly_precip[1]/28
  precip_daily[59:90] = monthly_precip[2]/31
  precip_daily[90:120] = monthly_precip[3]/30
  precip_daily[120:151] = monthly_precip[4]/31
  precip_daily[151:181] = monthly_precip[5]/30
  precip_daily[181:212] = monthly_precip[6]/31
  precip_daily[212:243] = monthly_precip[7]/31
  precip_daily[243:273] = monthly_precip[8]/30
  precip_daily[273:304] = monthly_precip[9]/31
  precip_daily[304:334] = monthly_precip[10]/30
  precip_daily[334:365] = monthly_precip[11]/31
  return precip_daily

# assumption: annual_precip is a numpy array with 365 elements
def calculate_monthly_precip_from_daily(annual_precip):
    monthly_precip = np.zeros(12)
    monthly_precip[0] = np.sum(annual_precip[0:31])
    monthly_precip[1] = np.sum(annual_precip[31:59])
    monthly_precip[2] = np.sum(annual_precip[59:90])
    monthly_precip[3] = np.sum(annual_precip[90:120])
    monthly_precip[4] = np.sum(annual_precip[120:151])
    monthly_precip[5] = np.sum(annual_precip[151:181])
    monthly_precip[6] = np.sum(annual_precip[181:212])
    monthly_precip[7] = np.sum(annual_precip[212:243])
    monthly_precip[8] = np.sum(annual_precip[243:273])
    monthly_precip[9] = np.sum(annual_precip[273:304])
    monthly_precip[10] = np.sum(annual_precip[304:334])
    monthly_precip[11] = np.sum(annual_precip[334:365])
    return monthly_precip

# attempted spline for high and low averages.
# Use Cubic Spline function to fit the daily means to the monthly means;
# (This requires picking a day within each month for which we think the daily mean will equal the monthly mean)
# Run the interpolation over 2 calendar years (730 days) so we get a smooth transition from end of old year to beginning of new year
# Compute a new set of annual daily means using the last 40 days of old year, first 40 days of new year, and averaging the rest of Old Year and New Year in between.
# (We discard the first 40 days of Old Year and the last 40 days of New Year)

def compute_daily_temps_spline(interpol_x, monthly_avgs, timespan):
    interpol_y = np.zeros(np.size(interpol_x))
    interpol_y[0:12] = monthly_avgs
    interpol_y[12:24] = monthly_avgs
    interpol = CubicSpline(interpol_x, interpol_y)
    temps_new = interpol(timespan)

    temps_new_ = np.zeros(365)
    temps_new_[0:40] = temps_new[365:40+365]
    temps_new_[-40:] = temps_new[365-40:365]
    temps_new_[40:365-40] = (np.array(temps_new[40:365-40]) + np.array(temps_new[365+40:730-40]))/2.0

    return temps_new_

# temps_mth = list of monthly average temps (array of size 12), temps_daily = daily average temps assigned to its corresponding monthly average
# should return 'smoothed' daily average temps
def compute_daily_temps_runAvg(temps_daily, temps_mth, cycle_val):
  # attempt to implement the running average method from my MATLAB script
  temps_temp = np.zeros(730)
  # start out with the daily avgs set to the monthly avgs
  temps_temp[0:365] = temps_daily[0:365]
  temps_temp[365:730] = temps_daily[0:365]

  # run smoothing operation for n cycles (n = cycle_val parameter)
  for i in range(0, cycle_val):
    # for each cycle, re-compute average daily precip based on 4-day running average across 2 calendar years
    for j in range(0, 730-4):
      temps_temp[j+2] = np.mean(temps_temp[j:j+4])

    # truncate edges of 2-year run
    temps_daily_new_runAvg = np.zeros(365)
    temps_daily_new_runAvg[0:10] = temps_temp[365:10+365]
    temps_daily_new_runAvg[-10:] = temps_temp[365-10:365]
    temps_daily_new_runAvg[10:365-10] = (np.array(temps_temp[10:365-10]) + np.array(temps_temp[365+10:730-10]))/2.0

    # compute monthly totals from smoothed daily averages
    temps_daily_new_mths_rA = calculate_mean_monthly_temps(temps_daily_new_runAvg)
    temps_diff_ = temps_daily_new_mths_rA - temps_mth

    # correct each daily average by how much the corresponding monthly average is off from the starting data by
    # but only for each cycle where this will run next
    if i < cycle_val:
      temps_daily_new_runAvg[0:31] -= temps_diff_[0]
      temps_daily_new_runAvg[31:59] -= temps_diff_[1]
      temps_daily_new_runAvg[59:90] -= temps_diff_[2]
      temps_daily_new_runAvg[90:120] -= temps_diff_[3]
      temps_daily_new_runAvg[120:151] -= temps_diff_[4]
      temps_daily_new_runAvg[151:181] -= temps_diff_[5]
      temps_daily_new_runAvg[181:212] -= temps_diff_[6]
      temps_daily_new_runAvg[212:243] -= temps_diff_[7]
      temps_daily_new_runAvg[243:273] -= temps_diff_[8]
      temps_daily_new_runAvg[273:304] -= temps_diff_[9]
      temps_daily_new_runAvg[304:334] -= temps_diff_[10]
      temps_daily_new_runAvg[334:365] -= temps_diff_[11]

      # reassign the current daily precip averages to the temp array to be smoothed in the next cycle
      temps_temp[0:365] = temps_daily_new_runAvg[0:365]
      temps_temp[365:730] = temps_daily_new_runAvg[0:365]


    # smoothing operation by re-assigning the normalized daily average to be the 21-day mean of the unnormalized daily average
    temps_temp_ = np.zeros(730)
    for k in range(0+10, 730-10):
      temps_temp_[k] = np.mean(temps_temp[k-10:k+11])

    temps_temp_[0:10] = temps_temp[365:365+10]
    temps_temp_[730-10:] = temps_temp[365-10:365]
    temps_temp = temps_temp_

  return temps_temp

# https://www.omnicalculator.com/physics/relative-humidity#how-to-calculate-relative-humidity
def calculate_wetbulb(drybulb, dp_temps):
  rel_humid = np.zeros(365)
  c1 = 17.625
  c2 = 243.04
  vals1 = c1*dp_temps[0:365] / (dp_temps[0:365] + c2)
  vals2 = c1*drybulb[0:365] / (drybulb[0:365] + c2)
  rel_humid = 100*np.exp(vals1)/np.exp(vals2)

  # https://www.omnicalculator.com/physics/wet-bulb#how-to-calculate-the-wet-bulb-temperature
  '''
  Although many equations have been created over the years our calculator uses the Stull formula,
  which is accurate for relative humidities between 5% and 99% and temperatures between -20°C and 50°C.
  It loses its accuracy in situations where both moisture and heat are low in value,
  but even then the error range is only between -1°C to +0.65°C.

  T _w = T*arctan(0.151977*sqrt(RH+8.313659)) + 0.00391838*sqrt(RH^3)*arctan(0.023101*RH) − arctan(RH−1.676331) + arctan(T+RH) − 4.686035
  '''
  wetbulb = np.zeros(rel_humid.shape[0])
  # https://numpy.org/doc/stable/reference/generated/numpy.power.html
  c3 = np.power(rel_humid, 1.5)
  c4 = np.power(rel_humid+8.313659, 0.5)
  c5 = np.arctan(0.151977*c4)
  c6 = np.arctan(0.023101*rel_humid)
  c7 = np.arctan(rel_humid-1.676331)
  c8 = np.arctan(drybulb+rel_humid)
  wetbulb = drybulb*c5 + 0.00391838*c3*c6 - c7 + c8 - 4.686035
  return wetbulb

# assumption: we know monthly relative humidity but not monthly dew point
# the numpy arrays we're working with should all have 12 values
# https://www.omnicalculator.com/physics/relative-humidity#how-to-calculate-relative-humidity
def calculate_dp_from_RH(drybulb, rel_humid):
  dp = np.zeros(12)
  c1 = 17.625
  c2 = 243.04
  vals1 = np.log(rel_humid/100)
  vals2 = np.divide(c1*drybulb[0:12], (drybulb[0:12] + c2))
  dp = np.divide(c2*(vals1 + vals2),(c1 - (vals1 + vals2)))
  return dp

"""**Mount Hamilton climate averages**
https://en.wikipedia.org/wiki/Mount_Hamilton_(California)#Climate

9.8,9.3,10.7,12.9,16.8,21.7,25.9,25.8,23.6,18.6,12.6,9.2

6.9,6.2,7.3,8.9,12.7,17.5,22.2,21.9,19.7,14.9,9.5,6.3

3.9,3.2,3.8,4.8,8.6,13.3,18.4,18.1,15.7,11.3,6.3,3.3

128,122,112,56,33,7,0,1,4,34,76,120

http://www.unit-conversion.info/texttools/replace-text/

### "Dream 22-25 C 1500 mm climate" https://i.imgur.com/SMCOzy0.png

highs_mth = np.array([28.2,28.1,28.7,29.8,27.9,26.4,25,26.1,27.4,29.6,29.8,28.7])

lows_mth = np.array([20.6,20.5,19.7,19.4,16.7,13.2,11.2,11.9,15.2,18.4,20.8,20.9])

avgs_mth = np.array([24.4,24.3,24.2,24.6,22.3,19.8,18.1,19,21.3,24,25.3,24.8])

dewpoint_mth = np.array([18.5,18.6,17.1,15.6,12.3,8.8,6.7,8.3,11,14,16.8,18])

precip_mth = np.array([186,177,145,100,67,54,63,70,57,89,113,161])

Arequipa climate averages from Wiki and ClimatesToTravel

dewpoint_mth = np.zeros(12)
rel_humid_mth = np.zeros(12)


'''
highs_mth = np.array([21.8,21.4,24.2,24.7,22.3,21.7,21.7,22.2,22.7,22.8,22.7,22.5])
lows_mth = np.array([8.5,8.7,8.3,7.1,6.2,5.4,5.2,5.4,6.2,6.4,6.6,7.6])
avgs_mth = np.array([15.3,15,15,15.2,14.3,13.5,13.3,14,15.9,16.3,16.4,16.3])
'''
#### https://en.wikipedia.org/wiki/Arequipa#Climate
#### https://www.climatestotravel.com/climate/peru/arequipa new source for average Arequipa temps

highs_mth = np.array([21.1,20.9,21.3,22,22.2,21.9,21.7,22.2,22.4,22.4,22.2,21.8])
lows_mth = np.array([10.4,10.5,10.2,9.6,8.4,7.7,7.4,7.8,8.7,9,8.9,9.8])
avgs_mth = np.array([15.8,15.7,15.8,15.8,15.3,14.8,14.5,14.9,15.6,15.7,15.5,15.8])
#### adding the dewpoint/humidity stat
#### default to dewpoint if both are available. if neither is available, can't compute wet bulb temps
rel_humid_mth = np.array([52,59,58,48,41,45,44,43,42,39,39,43])
#### adding precipitation
precip_mth = np.array([27.5,39.9,20.6,0.6,0.1,0.1,0,1,0.8,0.2,1,4.7])
#### adding precip days
precip_days_mth = np.array([4.8,5.6,4.5,0.4,0.1,0,0,0.1,0.3,0.1,0.2,1.6])
#### adding 30-year record temps
rec_high_mth = np.array([29.5,29.7,26.6,26.4,32,26.2,28,26.8,27,26.1,27.8,27.2])
rec_low_mth = np.array([0.9,0,0,-2.0,0,-1.1,-3.7,-0.2,0,0.1,0,2])

climate_name = "Arequipa_2020"

Mecca 2300 projection (Precip Days based on current Mecca)
----------------------------------
45,47,48,52,54,53,54,53,55,50,48,47

38.2,40.5,42.6,44.5,45.9,46.7,46.1,45.5,44.8,43.6,42.3,39.7

30.8,32.6,34.35,36.4,38.2,39.5,39.6,39.4,38.5,36.6,34.9,32.35

23.4,24.7,26.1,28.3,30.5,32.3,33.1,33.3,32.2,29.6,27.5,25

11,13,13,17,20,24,24,25,22,18,16,12

12,9,4,2,0,0,1,5,24,17,8,16

3.0,1.1,2.4,0.6,0,0,0.1,0.8,3.1,3.5,2.2,2.8

14.6,15.7,17.2,18.7,19.9,19.2,19.6,22.9,23.5,21.8,19.5,15.4
"""

# input monthly averages here from selected climate

dewpoint_mth = np.zeros(12)
rel_humid_mth = np.zeros(12)

highs_mth = np.array([27.10,26.70,26.30,25.30,23.90,22.30,21.70,23.30,25.30,27.10,28.70,28.20])
lows_mth = np.array([18.00,17.70,16.50,13.70,11.10,8.50,7.30,8.50,10.80,13.50,16.40,18.00])
avgs_mth = np.array([22.55,22.20,21.40,19.50,17.50,15.40,14.50,15.90,18.05,20.30,22.55,23.10])
# adding the dewpoint/humidity stat
# default to dewpoint if both are available. if neither is available, can't compute wet bulb temps
dewpoint_mth = np.array([17.00,17.00,15.40,11.90,8.20,6.00,4.90,5.80,7.30,10.40,14.00,16.50])
#rel_humid_mth = np.array([71,72,69,62,54,53,52,51,50,53,59,66])

precip_mth = np.array([256,222,137,48,20,25,27,33,21,18,41,93])
# adding precip days
precip_days_mth = np.array([17.7,18.1,12.6,7.2,4.3,3.9,4.2,5,3.4,2.3,4.3,7.6])
# adding 30-year record temps
rec_high_mth = np.array([35.5,36.0,36.5,35.0,34.5,33.0,32.5,32.5,35.5,36.5,37.0,37.0])
rec_low_mth = np.array([11.0,10.0,5.5,1.5,0.5,0.0,0.5,0.0,0.5,0.5,6.5,9.5])

climate_name = "NouveauYathrib_2290"

time = np.linspace(0, 730, 730)

# assumption: either dewpoint_mth is all zeros or relhumid_mth is all zeros, but not both
# default: dewpoint_mth data is available making relhumid_mth redundant
# https://stackoverflow.com/questions/18395725/test-if-numpy-array-contains-only-zeros
if (np.all(dewpoint_mth == 0)) and not (np.all(rel_humid_mth == 0)):
  print(rel_humid_mth)
  dewpoint_mth = np.round(calculate_dp_from_RH(avgs_mth, rel_humid_mth), 4)
  # Australia climate data uses afternoon RH, use highs_mth
  #dewpoint_mth = np.round(calculate_dp_from_RH(highs_mth, rel_humid_mth), 4)
  print(dewpoint_mth)


# https://stackoverflow.com/questions/48199077/elementwise-aggregation-average-of-values-in-a-list-of-numpy-arrays-with-same
#avgs_mth = np.mean([highs_mth, lows_mth], axis=0)
#print(avgs_mth)

# use running_average method to compute daily mean temps monthly mean temps

# initialize the values of high_temps, low_temps, and avg_temps to the monthly averages
# daily average for each day is the monthly average for that month
high_temps = assign_monthly_avg_to_days(highs_mth)
low_temps = assign_monthly_avg_to_days(lows_mth)
avg_temps = assign_monthly_avg_to_days(avgs_mth)

RH_temps = assign_monthly_avg_to_days(rec_high_mth)
RL_temps = assign_monthly_avg_to_days(rec_low_mth)

# for Volantis I used https://www.omnicalculator.com/physics/dew-point- above 18 = rounded to nearest 0.1, below 18 = rounded to nearest 0.5
dewpoint_temps = assign_monthly_avg_to_days(dewpoint_mth)
dp_temps_new = compute_daily_temps_runAvg(dewpoint_temps, dewpoint_mth, 50)
dp_mth_compute365 = calculate_mean_monthly_temps(dp_temps_new)

high_temps_new_ = compute_daily_temps_runAvg(high_temps, highs_mth, 50)

highs_mth_compute365 = calculate_mean_monthly_temps(high_temps_new_)
print(highs_mth_compute365 - highs_mth)
print(np.mean(high_temps_new_) - np.mean(high_temps))

low_temps_new_ = compute_daily_temps_runAvg(low_temps, lows_mth, 50)

lows_mth_compute365 = calculate_mean_monthly_temps(low_temps_new_)
print(lows_mth_compute365 - lows_mth)
print(np.mean(low_temps_new_) - np.mean(low_temps))

# compute new daily means from high and low temps
high_temps_new_ = 1.0*np.round(1*high_temps_new_, 2)
low_temps_new_ = 1.0*np.round(1*low_temps_new_, 2)
avg_temps_new_ = (np.array(low_temps_new_) + np.array(high_temps_new_))/2.0
#avg_temps_new_ = 1.0*np.round(1*avg_temps_new_, 2)
dp_temps_new_ = 1.0*np.round(1*dp_temps_new, 2)


wetbulb_high_dp = calculate_wetbulb(high_temps_new_[0:365], dp_temps_new_)
wetbulb_low_dp = calculate_wetbulb(low_temps_new_[0:365], dp_temps_new_)
wetbulb_avg_dp = calculate_wetbulb(avg_temps_new_[0:365], dp_temps_new_)


# https://datagy.io/matplotlib-title/
fig, ax = plt.subplots(figsize=(10,8))
#plt.figure(figsize = (10,8))
plt.title(climate_name + " Average Daily Temperatures" + "")
plt.xlabel("Day of year")
plt.ylabel("Temperature (deg C)")
plt.plot(time[0:365], high_temps_new_[0:365], 'g')
#plt.plot(time[0:365], high_temps, 'b')
plt.plot(time[0:365], low_temps_new_[0:365], 'g')
#plt.plot(time[0:365], low_temps, 'b')
plt.plot(time[0:365], avg_temps_new_[0:365], 'r')
#plt.plot(time[0:365], avg_temps, 'b')
#plt.plot(time[0:365], dewpoint_temps, 'b')
plt.plot(time[0:365], dp_temps_new_[0:365], 'y')
plt.plot(time[0:365], wetbulb_high_dp, 'purple')
#plt.plot(time[0:365], wetbulb_low_dp, 'purple')
plt.plot(time[0:365], RH_temps, 'b')
plt.plot(time[0:365], RL_temps, 'b')
plt.xlim(0, 365)
#plt.ylim(10, 50)
ax.set_xticks([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365])
# remember to manually adjust the yticks range!
ax.set_yticks(np.arange(0, 40, 5))
ax.grid()
plt.show()

'''
# https://pythonnumericalmethods.berkeley.edu/notebooks/chapter17.03-Cubic-Spline-Interpolation.html

# monthly averages here from _______ fictional climate)
#highs_mth = np.array([40.4,40.5,41.1,42.4,43.2,42.5,42.5,43.2,45.7,46.5,44.9,42.2])
#lows_mth = np.array([34.2,33.9,32.9,30,25.2,18.1,18.1,22.8,29.1,33.9,35.5,35.2])

time = np.linspace(0, 730, 730)

# https://stackoverflow.com/questions/48199077/elementwise-aggregation-average-of-values-in-a-list-of-numpy-arrays-with-same
avgs_mth = np.mean([highs_mth, lows_mth], axis=0)
#print(avgs_mth)

# initialize the values of high_temps, low_temps, and avg_temps to the monthly averages
# daily average for each day is the monthly average for that month
high_temps = assign_monthly_avg_to_days(highs_mth)
low_temps = assign_monthly_avg_to_days(lows_mth)
avg_temps = assign_monthly_avg_to_days(avgs_mth)

# Use Cubic Spline function to fit the daily means to the monthly means;
highs_interpol_x = [10,48,75,104,133,165,199,227,258,292,320,350,10+365,48+365,75+365,104+365,133+365,165+365,199+365,227+365,258+365,292+365,320+365,350+365]
high_temps_new_ = compute_daily_temps_spline(highs_interpol_x, highs_mth, time)

highs_mth_compute365 = calculate_mean_monthly_temps(high_temps_new_)
print(highs_mth_compute365 - highs_mth)
print(np.mean(high_temps_new_) - np.mean(high_temps))

# Use Cubic Spline function to fit the daily means to the monthly means;
lows_interpol_x = [13,47,75,104,136,165,199,227,258,287,315,352,13+365,47+365,75+365,104+365,136+365,165+365,199+365,227+365,258+365,287+365,315+365,352+365]
low_temps_new_ = compute_daily_temps_spline(lows_interpol_x, lows_mth, time)

lows_mth_compute365 = calculate_mean_monthly_temps(low_temps_new_)
print(lows_mth_compute365 - lows_mth)
print(np.mean(low_temps_new_) - np.mean(low_temps))

# compute new daily means from high and low temps
avg_temps_new_ = (np.array(low_temps_new_) + np.array(high_temps_new_))/2.0
avg_temps_new_ = np.round(avg_temps_new_, 2)
high_temps_new_ = np.round(high_temps_new_, 2)
low_temps_new_ = np.round(low_temps_new_, 2)
'''

# trying to compute daily precip from monthly precip averages

tim = np.linspace(0, 730, 730)

##precip_mth = np.array([356,391,134,53,12,2,3,0,0,8,37,89])
# initialize the values of dream_D_precip, dream_N_precip, and avg_temps to the monthly averages
# daily average for each day is the monthly average for that month
precip_daily = assign_initial_daily_precip(precip_mth)

precip_prob_daily = assign_initial_daily_precip(precip_days_mth)


p_time = np.linspace(0, 365, 365)

'''
https://weatherspark.com/y/137170/Average-Weather-in-Taipei-Taiwan-Year-Round#Sections-Rain
To show variation within the months and not just the monthly totals, we show the rainfall accumulated over a sliding 31-day period centered around each day of the year.
'''

'''
use convolution or something to get the 31-day moving average after getting the daily average for each day of the year
https://stackoverflow.com/questions/14313510/how-to-calculate-rolling-moving-average-using-python-numpy-scipy
'''

# attempt to implement the running average method from my MATLAB script
precip_temp = np.zeros(730)
# start out with the daily avgs set to the monthly avgs
precip_temp[0:365] = precip_daily[0:365]
precip_temp[365:730] = precip_daily[0:365]

precip_p_temp = np.zeros(730)
# start out with the daily avgs set to the monthly avgs
precip_p_temp[0:365] = precip_prob_daily[0:365]
precip_p_temp[365:730] = precip_prob_daily[0:365]

# run smoothing operation for n cycles
cycle_val = 50
for i in range(0, cycle_val):
  # for each cycle, re-compute average daily precip based on 4-day running average across 2 calendar years
  for j in range(0, 730-4):
    precip_temp[j+2] = np.mean(precip_temp[j:j+4])

    precip_p_temp[j+2] = np.mean(precip_p_temp[j:j+4])

  # truncate edges of 2-year run
  precip_daily_new_runAvg = np.zeros(365)
  precip_daily_new_runAvg[0:10] = precip_temp[365:10+365]
  precip_daily_new_runAvg[-10:] = precip_temp[365-10:365]
  precip_daily_new_runAvg[10:365-10] = (np.array(precip_temp[10:365-10]) + np.array(precip_temp[365+10:730-10]))/2.0

  # compute monthly totals from smoothed daily averages
  precip_daily_new_mths_rA = calculate_monthly_precip_from_daily(precip_daily_new_runAvg)
  precip_diff_ = precip_daily_new_mths_rA - precip_mth


  # truncate edges of 2-year run
  precip_p_daily_new_runAvg = np.zeros(365)
  precip_p_daily_new_runAvg[0:10] = precip_p_temp[365:10+365]
  precip_p_daily_new_runAvg[-10:] = precip_p_temp[365-10:365]
  precip_p_daily_new_runAvg[10:365-10] = (np.array(precip_p_temp[10:365-10]) + np.array(precip_p_temp[365+10:730-10]))/2.0
  # compute monthly totals from smoothed daily averages
  precip_p_daily_new_mths_rA = calculate_monthly_precip_from_daily(precip_p_daily_new_runAvg)
  precip_p_diff_ = precip_p_daily_new_mths_rA - precip_days_mth



  # correct each daily average by how much the corresponding monthly average is off from the starting data by
  # but only for each cycle where this will run next
  if i < cycle_val:
    precip_daily_new_runAvg[0:31] -= precip_diff_[0]/31
    precip_daily_new_runAvg[31:59] -= precip_diff_[1]/28
    precip_daily_new_runAvg[59:90] -= precip_diff_[2]/31
    precip_daily_new_runAvg[90:120] -= precip_diff_[3]/30
    precip_daily_new_runAvg[120:151] -= precip_diff_[4]/31
    precip_daily_new_runAvg[151:181] -= precip_diff_[5]/30
    precip_daily_new_runAvg[181:212] -= precip_diff_[6]/31
    precip_daily_new_runAvg[212:243] -= precip_diff_[7]/31
    precip_daily_new_runAvg[243:273] -= precip_diff_[8]/30
    precip_daily_new_runAvg[273:304] -= precip_diff_[9]/31
    precip_daily_new_runAvg[304:334] -= precip_diff_[10]/30
    precip_daily_new_runAvg[334:365] -= precip_diff_[11]/31
    # reassign all negative values to equal 0; this is average precipitation
    precip_daily_new_runAvg[precip_daily_new_runAvg < 0] = 0
    # reassign the current daily precip averages to the temp array to be smoothed in the next cycle
    precip_temp[0:365] = precip_daily_new_runAvg[0:365]
    precip_temp[365:730] = precip_daily_new_runAvg[0:365]

    precip_p_daily_new_runAvg[0:31] -= precip_p_diff_[0]/31
    precip_p_daily_new_runAvg[31:59] -= precip_p_diff_[1]/28
    precip_p_daily_new_runAvg[59:90] -= precip_p_diff_[2]/31
    precip_p_daily_new_runAvg[90:120] -= precip_p_diff_[3]/30
    precip_p_daily_new_runAvg[120:151] -= precip_p_diff_[4]/31
    precip_p_daily_new_runAvg[151:181] -= precip_p_diff_[5]/30
    precip_p_daily_new_runAvg[181:212] -= precip_p_diff_[6]/31
    precip_p_daily_new_runAvg[212:243] -= precip_p_diff_[7]/31
    precip_p_daily_new_runAvg[243:273] -= precip_p_diff_[8]/30
    precip_p_daily_new_runAvg[273:304] -= precip_p_diff_[9]/31
    precip_p_daily_new_runAvg[304:334] -= precip_p_diff_[10]/30
    precip_p_daily_new_runAvg[334:365] -= precip_p_diff_[11]/31
    # reassign all negative values to equal 0; probability should always be between 0 and 1
    precip_p_daily_new_runAvg[precip_p_daily_new_runAvg < 0] = 0
    precip_p_daily_new_runAvg[precip_p_daily_new_runAvg > 1] = 1
    # reassign all indices where precip_daily_new_runAvg < 0 to equal 0
    precip_p_daily_new_runAvg[precip_daily_new_runAvg <= 0] = 0
    # reassign the current daily precip averages to the temp array to be smoothed in the next cycle
    precip_p_temp[0:365] = precip_p_daily_new_runAvg[0:365]
    precip_p_temp[365:730] = precip_p_daily_new_runAvg[0:365]



precip_D_daily_new_mths_rA = calculate_monthly_precip_from_daily(precip_daily_new_runAvg)

print("Monthly precip totals from smoothing function: \n", np.round(precip_daily_new_mths_rA, decimals=2))
precip_diff_ = precip_daily_new_mths_rA - precip_mth
print("Diff from source data: \n", np.round(precip_diff_, decimals=2))


precip_p_D_daily_new_mths_rA = calculate_monthly_precip_from_daily(precip_p_daily_new_runAvg)

print("Monthly precip days from smoothing function: \n", np.round(precip_p_daily_new_mths_rA, decimals=2))
precip_p_diff_ = precip_p_daily_new_mths_rA - precip_days_mth
print("Diff from source data: \n", np.round(precip_p_diff_, decimals=2))

# attempt at implementing the 31-day running average sum for each day of the year for dream climate
# assumption: precip_D_daily_new_runAvg already contains the current simulated daily average precipitation
precip_daily_new_runAvg_base = np.zeros(730)
precip_daily_new_runAvg_base[0:365] = precip_daily_new_runAvg
precip_daily_new_runAvg_base[365:730] = precip_daily_new_runAvg
precip_daily_new_runAvg_sum = np.zeros(730)

# copy previous code for daily precip prob
precip_p_daily_new_runAvg_base = np.zeros(730)
precip_p_daily_new_runAvg_base[0:365] = precip_p_daily_new_runAvg
precip_p_daily_new_runAvg_base[365:730] = precip_p_daily_new_runAvg
precip_p_daily_new_runAvg_smooth = np.zeros(730)

for i in range(0+15, 730-15):
  precip_daily_new_runAvg_sum[i] = np.sum(precip_daily_new_runAvg_base[i-15:i+16])

  precip_p_daily_new_runAvg_smooth[i] = np.mean(precip_p_daily_new_runAvg_base[i-15:i+16])

precip_daily_new_runAvg_sum[0:15] = precip_daily_new_runAvg_sum[365:365+15]
precip_daily_new_runAvg_sum[730-15:] = precip_daily_new_runAvg_sum[365-15:365]
precip_daily_new_runAvg_sum_avg = np.zeros(365)
precip_daily_new_runAvg_sum_avg = precip_daily_new_runAvg_sum[0:365]/31

precip_p_daily_new_runAvg_smooth[0:15] = precip_p_daily_new_runAvg_smooth[365:365+15]
precip_p_daily_new_runAvg_smooth[730-15:] = precip_p_daily_new_runAvg_smooth[365-15:365]
precip_p_daily_new_runAvg_ = np.zeros(365)
precip_p_daily_new_runAvg_ = precip_p_daily_new_runAvg_smooth[0:365]


running_avg_yearly_sum = calculate_monthly_precip_from_daily(precip_daily_new_runAvg_sum_avg)
#print(running_avg_yearly_sum)
#print(np.sum(running_avg_yearly_sum))
#print(np.round(precip_daily_new_mths_rA, decimals=2))
#print(np.sum(precip_daily_new_mths_rA))

print("Monthly precip totals from 31-day moving average: \n", np.round(running_avg_yearly_sum, decimals=2))
print("Monthly precip totals (original): \n", precip_mth)
precip_diff_ = running_avg_yearly_sum - precip_mth
print("Diff from source data: \n", np.round(precip_diff_))

running_avg_yearly_sum_prob = calculate_monthly_precip_from_daily(precip_p_daily_new_runAvg_)
print("Monthly precip days count from 31-day moving average: \n", np.round(running_avg_yearly_sum_prob, decimals=2))
print("Monthly precip days count (original): \n", precip_days_mth)
precip_diff_p = running_avg_yearly_sum_prob - precip_days_mth
print("Diff from source data: \n", np.round(precip_diff_p,2))



#plt.figure(figsize = (10,8))
fig, ax = plt.subplots(1, figsize = (10,8))
plt.title(climate_name + " Average 31-day Floating Precipitation")
plt.xlabel("Day of year")
plt.ylabel("Precipitation (mm)")
plt.plot(tim[0:365], precip_daily_new_runAvg_sum[0:365], 'g')
#plt.plot(tim[0:365], np.multiply(31,precip_daily_new_runAvg[0:365]), 'r')
plt.ylim(0,)
plt.xlim(0, 365)
ax.set_xticks([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365])
ax.grid()
plt.show()


# plot precip
#plt.figure(figsize = (10,8))
fig, ax = plt.subplots(1, figsize = (10,8))
plt.title(climate_name + " Average Daily Precipitation")
plt.xlabel("Day of year")
plt.ylabel("Precipitation (mm/day)")
plt.plot(tim[0:365], precip_daily, 'b')
plt.plot(tim[0:365], precip_daily_new_runAvg, 'r')
plt.plot(tim[0:365], precip_daily_new_runAvg_sum[0:365]/31, 'g')
ax.set_xticks([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365])
plt.ylim(0,)
plt.xlim(0,365)
ax.grid()
plt.show()
# https://stackoverflow.com/questions/2891790/pretty-print-a-numpy-array-without-scientific-notation-and-with-given-precision
#print(precip_daily_new_runAvg_sum[0:365])

# plot precip totals + probabilities
#plt.figure(figsize = (10,8))
# https://stackabuse.com/how-to-set-axis-range-xlim-ylim-in-matplotlib/
fig, ax = plt.subplots(1, figsize = (10,8))
plt.title(climate_name + " Average Daily Precipitation + Probability")
plt.xlabel("Day of year")
plt.ylabel("Precipitation (mm/day)")
plt.plot(tim[0:365], precip_daily, 'b')
plt.plot(tim[0:365], precip_daily_new_runAvg_sum[0:365]/31, 'g')
ax.set_xticks([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365])
plt.ylim(0,)
plt.xlim(0,365)

ax2 = ax.twinx()
ax2.set_ylabel("Precipitation probability")
ax2.plot(tim[0:365], precip_prob_daily[0:365], 'r')
ax2.plot(tim[0:365], precip_p_daily_new_runAvg_, 'y')

ax.grid()
# need to manually set axis limits for each climate
ax.set_ylim(0,10.0)
ax2.set_ylim(0,1.0)
plt.xlim(0,365)
plt.show()


# plot probabilistic precipitation totals on days where it does rain
# to do this we divide mean daily precip by daily prob of precip
#plt.figure(figsize = (10,8))

# https://stackoverflow.com/questions/42540224/conditional-operations-on-numpy-arrays
predict_precip_int = np.zeros(365)
predict_precip_int = np.where(precip_p_daily_new_runAvg > 0.01, np.divide(precip_daily_new_runAvg_sum[0:365]/31, precip_p_daily_new_runAvg), predict_precip_int)
predict_precip_int = np.where(precip_p_daily_new_runAvg < 0.01, 100*precip_daily_new_runAvg_sum[0:365]/31, predict_precip_int)

# let's smooth the predicted precipitation intensity lmao
predict_precip_int_base = np.zeros(730)
predict_precip_int_base[0:365] = predict_precip_int
predict_precip_int_base[365:730] = predict_precip_int
predict_precip_int_smooth = np.zeros(730)
for i in range(0+2, 730-2):
  predict_precip_int_smooth[i] = np.mean(predict_precip_int_base[i-2:i+2])
predict_precip_int_smooth[0:2] = predict_precip_int_smooth[365:365+2]
predict_precip_int_smooth[730-2:] = predict_precip_int_smooth[365-2:365]


fig, ax = plt.subplots(1, figsize = (10,8))
plt.title(climate_name + " Predicted Precipitation Intensity")
plt.xlabel("Day of year")
plt.ylabel("Precipitation/day (mm)")
plt.plot(tim[0:365], predict_precip_int_smooth[0:365], 'g')
plt.ylim(0,)
plt.xlim(0, 365)
ax.set_xticks([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365])
ax.grid()
plt.show()

from google.colab import files

#https://stackoverflow.com/questions/49394737/exporting-data-from-google-colab-to-local-machine
#https://stackoverflow.com/questions/6081008/dump-a-numpy-array-into-a-csv-file

# https://stackoverflow.com/questions/32635911/convert-elements-of-an-array-from-scientific-notation-to-decimal-notation-in-pyt
# https://www.freecodecamp.org/news/dataframe-to-csv-how-to-save-pandas-dataframes-by-exporting/
avg_temps = np.zeros((365, 7))
avg_temps[:,0] = high_temps_new_[0:365]
avg_temps[:,1] = avg_temps_new_[0:365]
avg_temps[:,2] = low_temps_new_[0:365]
avg_temps[:,3] = dp_temps_new_[0:365]
avg_temps[:,4] = 1.0*np.round(wetbulb_high_dp[0:365], 2)
avg_temps[:,5] = 1.0*np.round(precip_daily_new_runAvg_sum[0:365], 1)
avg_temps[:,6] = 100*np.round(precip_p_daily_new_runAvg_[0:365], 4)

np.set_printoptions(suppress=True, precision=2)
np.savetxt(climate_name + '_daily_averages_.csv', avg_temps, delimiter=',',fmt='%f')

#np.savetxt('precip_daily_31dayavg.csv', precip_daily_new_runAvg_sum, delimiter=',',fmt='%f')